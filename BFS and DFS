

#include <iostream>
#include<list>
using namespace std;
class graph{
private:
    int v;
    list<int>*adj;
    void DFS_helper(int s,bool *visited);
public:
    graph(int v);
    void addedge(int v,int w);
    void BFS(int s);
    void DFS(int s);
    
};
graph::graph(int v){
    v=v;
    adj=new list<int> [v];
}
void graph::addedge(int v, int w){
    adj[v].push_back(w);
}
void graph::DFS_helper(int s, bool *visited){
    cout<<"visiting node: "<<s<<endl;
    visited[s]=true;
    
    for(auto i=adj[s].begin();i!=adj[s].end();i++){
        if(!visited[*i]){
            cout<<"Going to vertex"<<*i<<"from vertex"<<s<<endl;
            DFS_helper(*i, visited);
        }
    }
}
void graph::DFS(int s){
    bool *visited=new bool[v];
    for(int i=0;i<v;i++){
        visited[i]=false;
    }
    DFS_helper(s,visited);
}
void graph::BFS(int s){
    bool *visited =new bool[v];
    for(int i=0;i<v;i++){
        visited[i]=false;
    }
    list<int> queue;
    visited[s]=true;
    queue.push_back(s);
    
    while(!queue.empty()){
        s=queue.front();
        queue.pop_front();
        
        cout<<"checking adjacent vertices for vertex "<<s<<endl;
        for(auto i=adj[s].begin();i!=adj[s].end();i++){
            
            if(!visited[*i]){
                
                cout<<"visit and enqueue "<<*i<<endl;
                visited[*i]=true;
                
                queue.push_back(*i);
            }
        }
    }
}
int main(int argc, const char * argv[]) {
    // insert code here...
    graph g(6);
    
    g.addedge(0, 1);
    g.addedge(0, 2);
    
    g.addedge(1, 0);
    g.addedge(1, 3);
    g.addedge(1, 4);
    
    g.addedge(2, 0);
    g.addedge(2, 4);
    
    g.addedge(3, 1);
    g.addedge(3, 4);
    g.addedge(3, 5);
    
    g.addedge(4, 1);
    g.addedge(4, 2);
    g.addedge(4, 3);
    g.addedge(4, 5);
    
    g.addedge(5, 3);
    g.addedge(5, 4);
    
    g.BFS(2);
    g.DFS(0);
    g.DFS(2);
    
    
}
